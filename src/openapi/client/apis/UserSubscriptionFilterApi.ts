/* tslint:disable */
/* eslint-disable */
/**
 * My App
 * This is an awesome app!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200Response,
  PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest,
} from '../models/index';
import {
    GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200ResponseFromJSON,
    GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200ResponseToJSON,
    PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequestFromJSON,
    PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequestToJSON,
} from '../models/index';

export interface GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilterRequest {
    subscriptionFilterId: string;
}

export interface PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersOperationRequest {
    postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest: PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest;
}

/**
 * 
 */
export class UserSubscriptionFilterApi extends runtime.BaseAPI {

    /**
     */
    async getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfiltersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/subscription-filters`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200Response> {
        const response = await this.getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfiltersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilterRaw(requestParameters: GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200Response>> {
        if (requestParameters['subscriptionFilterId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionFilterId',
                'Required parameter "subscriptionFilterId" was null or undefined when calling getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/subscription-filters/{subscriptionFilterId}`;
        urlPath = urlPath.replace(`{${"subscriptionFilterId"}}`, encodeURIComponent(String(requestParameters['subscriptionFilterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilter(requestParameters: GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetcollectionGetfilters200Response> {
        const response = await this.getAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltergetoneGetfilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRaw(requestParameters: PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest'] == null) {
            throw new runtime.RequiredError(
                'postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest',
                'Required parameter "postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest" was null or undefined when calling postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefilters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/subscription-filters`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequestToJSON(requestParameters['postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefilters(requestParameters: PostAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAppUserdomainPresentationUsersubscriptionfilterUsersubscriptionfiltercreateCreatefiltersRaw(requestParameters, initOverrides);
    }

}
